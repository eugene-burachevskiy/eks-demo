apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
{{- if .Values.global.labels }}
{{ toYaml .Values.global.labels | indent 4 }}
{{- end }}
    k8s-addon: cluster-autoscaler.addons.k8s.io
    k8s-app: cluster-autoscaler
  name: cluster-autoscaler
  namespace: {{ .Values.global.namespace }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cluster-autoscaler
  labels:
{{- if .Values.global.labels }}
{{ toYaml .Values.global.labels | indent 4 }}
{{- end }}
    k8s-addon: cluster-autoscaler.addons.k8s.io
    k8s-app: cluster-autoscaler
rules:
  - apiGroups: [""]
    resources: ["events", "endpoints"]
    verbs: ["create", "patch"]
  - apiGroups: [""]
    resources: ["pods/eviction"]
    verbs: ["create"]
  - apiGroups: [""]
    resources: ["pods/status"]
    verbs: ["update"]
  - apiGroups: [""]
    resources: ["endpoints"]
    resourceNames: ["cluster-autoscaler"]
    verbs: ["get", "update"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["watch", "list", "get", "update"]
  - apiGroups: [""]
    resources:
      - "pods"
      - "services"
      - "replicationcontrollers"
      - "persistentvolumeclaims"
      - "persistentvolumes"
    verbs: ["watch", "list", "get"]
  - apiGroups: ["extensions"]
    resources: ["replicasets", "daemonsets"]
    verbs: ["watch", "list", "get"]
  - apiGroups: ["policy"]
    resources: ["poddisruptionbudgets"]
    verbs: ["watch", "list"]
  - apiGroups: ["apps"]
    resources: ["statefulsets", "replicasets", "daemonsets"]
    verbs: ["watch", "list", "get"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses", "csinodes", "csistoragecapacities", "csidrivers"]
    verbs: ["watch", "list", "get"]
  - apiGroups: ["batch", "extensions"]
    resources: ["jobs"]
    verbs: ["get", "list", "watch", "patch"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["create"]
  - apiGroups: ["coordination.k8s.io"]
    resourceNames: ["cluster-autoscaler"]
    resources: ["leases"]
    verbs: ["get", "update"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cluster-autoscaler
  namespace: {{ .Values.global.namespace }}
  labels:
{{- if .Values.global.labels }}
{{ toYaml .Values.global.labels | indent 4 }}
{{- end }}
    k8s-addon: cluster-autoscaler.addons.k8s.io
    k8s-app: cluster-autoscaler
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["create","list","watch"]
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["cluster-autoscaler-status", "cluster-autoscaler-priority-expander"]
    verbs: ["delete", "get", "update", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cluster-autoscaler
  labels:
{{- if .Values.global.labels }}
{{ toYaml .Values.global.labels | indent 4 }}
{{- end }}
    k8s-addon: cluster-autoscaler.addons.k8s.io
    k8s-app: cluster-autoscaler
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-autoscaler
subjects:
  - kind: ServiceAccount
    name: cluster-autoscaler
    namespace: {{ .Values.global.namespace }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cluster-autoscaler
  namespace: {{ .Values.global.namespace }}
  labels:
{{- if .Values.global.labels }}
{{ toYaml .Values.global.labels | indent 4 }}
{{- end }}
    k8s-addon: cluster-autoscaler.addons.k8s.io
    k8s-app: cluster-autoscaler
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cluster-autoscaler
subjects:
  - kind: ServiceAccount
    name: cluster-autoscaler
    namespace: {{ .Values.global.namespace }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cluster-autoscaler
  namespace: {{ .Values.global.namespace }}
  labels:
{{- if .Values.global.labels }}
{{ toYaml .Values.global.labels | indent 4 }}
{{- end }}
    app: cluster-autoscaler
    app.kubernetes.io/instance: "cluster-autoscaler"
    app.kubernetes.io/name: "cluster-autoscaler"
spec:
  replicas: {{ .Values.autoscaler.replicas }}
  selector:
    matchLabels:
      app: cluster-autoscaler
  template:
    metadata:
      labels:
        app: cluster-autoscaler
        app.kubernetes.io/instance: "cluster-autoscaler"
        app.kubernetes.io/name: "cluster-autoscaler"
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '8085'
        cluster-autoscaler.kubernetes.io/safe-to-evict: 'false'
    spec:
      nodeSelector:
{{- if .Values.autoscaler.nodeselector }}
{{ toYaml .Values.autoscaler.nodeselector | indent 8 }}
{{- end }}
      tolerations:
{{- if .Values.autoscaler.tolerations }}
{{ toYaml .Values.autoscaler.tolerations | indent 8 }}
{{- end }}
      affinity:
{{- if .Values.autoscaler.affinity }}
{{ toYaml .Values.autoscaler.affinity | indent 8 }}
{{- end }}
      serviceAccountName: cluster-autoscaler
      containers:
        - image: {{ .Values.autoscaler.image }}:{{ .Values.autoscaler.tag }}
          name: cluster-autoscaler
          resources:
{{- if .Values.autoscaler.resources }}
{{ toYaml .Values.autoscaler.resources | indent 12 }}
{{- end }}
          command:
            - ./cluster-autoscaler
            - --v=4
            - --stderrthreshold=info
            - --cloud-provider=aws
            - --skip-nodes-with-local-storage=false
            - --expander=least-waste
            - --node-group-auto-discovery=asg:tag=k8s.io/cluster-autoscaler/enabled,k8s.io/cluster-autoscaler/{{ .Values.autoscaler.cluster_name }}
            - --skip-nodes-with-system-pods=false
            - --scale-down-utilization-threshold=0.3
            - --scale-down-non-empty-candidates-count=5
            - --scale-down-candidates-pool-min-count=2
            - --scan-interval=10s
            - --balance-similar-node-groups=false
            - --scale-down-delay-after-add=60m
            - --scale-down-unneeded-time=30m
            - --scale-down-unready-time=30m
          volumeMounts:
            - name: ssl-certs
              mountPath: /etc/ssl/certs/ca-certificates.crt
              readOnly: true
          imagePullPolicy: {{ .Values.autoscaler.pullpolicy }}
      volumes:
        - name: ssl-certs
          hostPath:
            path: "/etc/ssl/certs/ca-bundle.crt"

---
apiVersion: v1
kind: Service
metadata:
  labels:
{{- if .Values.global.labels }}
{{ toYaml .Values.global.labels | indent 4 }}
{{- end }}
    app: cluster-autoscaler
    app.kubernetes.io/instance: "cluster-autoscaler"
    app.kubernetes.io/name: "cluster-autoscaler"
  name: cluster-autoscaler
  namespace: {{ .Values.global.namespace }}
spec:
  ports:
    - port: 8085
      protocol: TCP
      targetPort: 8085
      name: ca-http
  selector:
    app.kubernetes.io/instance: "cluster-autoscaler"
    app.kubernetes.io/name: "cluster-autoscaler"
  type: "ClusterIP"

---
{{- if .Values.autoscaler.prometheus.servicemonitor_enabled }}
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: cluster-autoscaler
  namespace: monitoring
  labels:
{{- if .Values.global.labels }}
{{ toYaml .Values.global.labels | indent 4 }}
{{- end }}
    prometheus: {{ .Values.autoscaler.prometheus.prom_name }}
    release: {{ .Values.autoscaler.prometheus.release_name }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: "cluster-autoscaler"
      app.kubernetes.io/name: "cluster-autoscaler"
  endpoints:
  - port: ca-http
    interval: 10s
    path: /metrics
  namespaceSelector:
    matchNames:
      - {{ .Values.global.namespace }}
{{- end }}
